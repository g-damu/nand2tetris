// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	DMux(in=load,sel=address[14],a=ram16kld,b=l1);
	DMux(in=l1,sel=address[13],a=screenld,b=l12);
//	DMux(in=ram4kmul,sel=address[12],a=ram4k1ld,b=ram4k2ld);
	
	
//16k RAM
	RAM16K(in=in,out=ram16kout,address=address[0..13],load=ram16kld);
//Screen
//	RAM4K(in=in,out=ram4k1out,address=address[0..11],load=ram4k1ld);
//	RAM4K(in=in,out=ram4k2out,address=address[0..11],load=ram4k2ld);
	Screen(in=in,load=screenld,address=address[0..12],out=screenout);
	
//Keyboard
	Keyboard(out=kbdout);
	
	Mux16(a=screenout,b=kbdout,sel=address[13],out=scrkbdout);
	Mux16(a=ram16kout,b=scrkbdout,sel=address[14],out=out);
}